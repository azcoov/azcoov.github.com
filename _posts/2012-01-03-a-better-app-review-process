#---
#layout: post
#title: "We need a better app review process - The Developer Score"
#excerpt:
#  After building and launching an iOS and Android app over the last few weeks, I realized how difficult it is to plan a proudct launch around strange app review processes. We need a better way. A clear path for how things work, with timelines, and incentives for developers and businesses that focus on quality.
#---

After building and launching an iOS and Android app over the last few weeks, I realized how difficult it is to plan a proudct launch around strange app review processes. We need a better way. A clear path for how things work, with timelines that you can plan for, and incentives for developers and businesses that focus on quality. When I say *quality* I'm not talking about [Path](https://path.com/) UI type quality. I can't do that... What I mean is minimal bugs and fluid user experience.

*I can't yet speak for the WP7 app hub review process, but lets assume that it sucks too.*

##So which review process is better? Android? Apple? WP7? - They all suck in my opinion. 

I was planning on going on a rant about both platforms and the release process. But that would make me the 10,000 programmer to cry about it on their blog. So instead I'll focus on how to disrupt this process with something that makes more sense.

##Social | Crowsourcing | Klout - style metrics for developers

I want something that sits between the Apple review process and the Android review process. I don't want it to be a free-for-all, but I also don't want to wait for days, or even weeks to launch an app. I want my app to be reviewed but I want a `will be completed by` date so that, you know, I can launch a product with a plan (unless the is rejected).

It seems to me that we have several working models around us that we can pull from to improve the process. StackOverflow reputation & badges and something like Klout make a lot of sense to me. How about we piggyback of those ideas, sprinkle in some moderation, and build a process that's based on rewarding good developers and not rewarding the bad ones?

##The Developer Score

The Developer Score would be a semi-social ranking system based on several data points designed to reward good developers and businesses with friction-free app releases. Here's a scoring system that I think could work. I want to turn this idea into a wiki so please tweet me your thoughts and I'll update the scoring system accordingly:

###Metric 1 - Reputation

Reputation would be similar to your reputation on StackOverflow. It's not about answering questions and helping out the community though. It's about the number of apps you push including patches and feature updates. Incouded in that would be responsiveness to bug reports. Imagine if we had a GitHub style issues system built into the appstore/marketplace. Users on any device can file a bug report, with screen-shots, in addition to data the is automatically and filed for you by the device itself. The more responsive you are to bug reports, the better your reputation will be. But it's not that simple... If you are closing a **ton** of bug reports what does that mean? Do you suck? Does your app suck? Or is it just exposed to more bugs because it's used by millions of users around the world, like say Facebook? This should all be a factor in the reputation score. A high reputation score could be meaningless if your other scores are low.

We'd need to ensure that develper A, with a single application who has little to no crash reports, and is responsive to issues, would be scored well relative to developer B who has 10 apps that all suck, crash, and who doesn't release patches often. I realize that budgets and overhead factor in to how fast a team might be able to ship a release. And that's fine but kudos to the team who doesn't ship crap. We are a two-man team and I'll be dammed if I ship crap. I'd rather not ship at all. *Please share your opinion on that.*

###Metric 2 - Quality

Piggybacking on the GitHub issues idea, the platform would also have real-time monitoring and crash reports. The awesome kind that you get with TestFlight App. The more crashes your app has, the lower the score. But, ***size does matter***. If your are the developer of iFart and your app crashes a couple of times, should your quality score be higher or lower than the Facebook team, who's app crashes a lot (for me anyway)? I'd like to say who gives a shit about the iFart app, because I don't? But we want integrity with this process, even for flatulance. So, this quality score is weighted where Facebook's score would probably remain higher, even with more crashes, because of reach.

Here is an example of a problem I could file that, if not corrected within a reasonable amount of time, would lower Facebook's Quality score. And it pissed me off so I'm putting it here.
<blockquote class="twitter-tweet"><p>Just deleted FB. The endless activity spinner I could deal with. Showing my avatar as some random couple. F That! <a href="http://t.co/YSS2NRlg" title="http://twitter.com/billycoover/status/154436210838876160/photo/1">twitter.com/billycoover/stâ€¦</a></p>&mdash; Billy Coover (@billycoover) <a href="https://twitter.com/billycoover/status/154436210838876160" data-datetime="2012-01-04T05:37:17+00:00">January 4, 2012</a></blockquote>
<script src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

###Metric 3 - Reach 

Number of downloads. Number of active users. Those are good metrics and Facebook, Twitter, and Angry Birds would probably lead there. But how about Square? I'd argue that their reach deserves a different metric, nameley something that looks at the amount of money passing through the app per day. Square was processing [4 million in payments as day](http://www.sfgate.com/cgi-bin/article.cgi?f=/c/a/2011/10/12/BU011LES92.DTL) in August of 2011. I'm sure it's a lot more now. That kind of volume is amazing and important to the app ecosystems. So reach has an impact that could send your Developer Score the wrong way fast. If you've ever had to release an app update where you said something like "please uninstall the prior version, then install this version" because of a bug, well, you have to bite the bullet for a while because you'll dip in the wrong direction. But don't worry, the score is fluid. Keep kicking ass and taking names and your score will come back fast.

###Metric 4 - Urgency or SWOT

We should not favorite Square persey, but they should have some type of urgency score based on their reach and volume. More like a [SWOT score](http://en.wikipedia.org/wiki/SWOT_analysis). So if Square does good, then is it good for the app store ecosystems? Well, think about it this way. Let's say that someone is able to hack Square on the iPhone, or find a security gap with mobile payments. That threattens the platforms and breaks trust with users of mobile devices, not just the iPhone or Android, and based on how fast big bugs spread in the media, it doesn't just impact Square. My grandma still walks into Cox to pay her cable bill because she's parinoid. If Square were to make a mistake somehow, it will have a ripple effect. Maybe it will be small. Or maybe the media will latch on and next Christmas we go back to palm pilots. So I think that warrents some type of threat score.

##So what does The Developer Score get you?

The Developer Score enables trusted developers to puch their apps through faster, and with a solid date. The devs that are the most trusted might even have parts of the review process skipped. For example, perhaps Apples HIG aren't reviewed for an app that has already had that review and had a high Developer Score.

It also encourges developers to do better. Ideally, if you are waiting two to three weeks to push your app through, it means you suck. And it's not because I "think" you suck, it's because the data points say so.



------
The Apple review process leaves you with this empty feeling inside. Will I get approved? How long will it take? What if something goes wrong? How can I tell if they are really testing it? What if they reject me and I fix the problem? Can I escalate the review?

The Android review process... Well, there isn't one. Once you publish your app, it's live and you are infecting the world. So what if your code is crap, buggy, doesn't work on certain devices?

I'm not against the review process. Yesterday I [wrote about](http://coovtech.com/posts/nearby-now-for-ios-android/) the Apple review process saving my ass. For that I'm grateful, but since then I've released patches and feature upgrades for both devices and I'm frustrated with it on both platforms.

From a software developer perspective, patching a release for Android is 100 times easier than it is with iOS. I was working with a user late last night who was having issues with the Android app. I was able to track the problem down, patch and release it and within a few minutes, the user had installed the upgrade and was happy. Had I installed